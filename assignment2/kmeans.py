# -*- coding: utf-8 -*-
"""kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zXHP6iVPaHstT2M8o0NRIpDyVgr12FGS
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import pprint
import matplotlib.pyplot as plt

# %matplotlib inline
#%precision 4
#np.set_printoptions(precision=4)
import pylab as pl

from google.colab import drive
drive.mount("/content/gdrive")
#on running this it will ask permission to mount with google drive. please click ok and allow. this program does not access any of the
# google drive documents except dataset which is uploaded

#from google.colab import files
#uploaded = files.upload()
#for func in uploaded.keys():
#       print('User uploaded file "{name}"'.format(name=func))

from numpy import genfromtxt
mylist=genfromtxt("/content/gdrive/My Drive/Colab Notebooks/A2Q1.csv", delimiter=',')
print(mylist)

newx=np.zeros(mylist.shape[0])
newy=np.zeros(mylist.shape[0])
for i in range(mylist.shape[0]):
  newx[i]=mylist[i][0]
  newy[i]=mylist[i][1]

import random
def kmeans():
  initialpartition = []
  for i in range(mylist.shape[0]):
    n = random.randint(1,4)
    initialpartition.append(n)
  #print(initialpartition)

  sum=np.zeros((4,mylist.shape[1]))
  count=np.zeros((4,mylist.shape[1]))
  for i in range(len(initialpartition)):
    sum[initialpartition[i]-1]+=mylist[i]
    count[initialpartition[i]-1]+=1
  #print(sum.shape)
  mean=np.zeros((4,mylist.shape[1]))
  for i in range(4):
    for j in range(mylist.shape[1]):
      if(count[i][j]==0):
        mean[i][j]=0
      else:
        mean[i][j]=sum[i][j]/count[i][j]
  #mean
  dist=np.zeros(4)
  newpartition=[]
  errorfunction=[]
  c=0
  prevpartition=initialpartition
  while prevpartition!=newpartition:
    prevpartition=newpartition
    newpartition=[]
    s=0
    for i in range(mylist.shape[0]):
      for j in range(4):
        dist[j]=np.linalg.norm(mylist[i]-mean[j])
      mink=np.argmin(dist)
      newpartition.append(mink+1)
      s+=(dist[mink])
    errorfunction.append(s)

    sum=np.zeros((4,mylist.shape[1]))
    count=np.zeros((4,mylist.shape[1]))
    for i in range(len(newpartition)):
      sum[newpartition[i]-1]+=mylist[i]
      count[newpartition[i]-1]+=1

    for i in range(4):
      for j in range(mylist.shape[1]):
        if(count[i][j]==0):
          mean[i][j]=0
        else:
          mean[i][j]=sum[i][j]/count[i][j]
    c=c+1;
  
  iterations=[i for i in range(1,c+1)]   
 
 
  plt.plot(iterations,errorfunction,'-o')
  plt.xlabel('iterations')
  plt.ylabel('errorfunction')
  plt.show()


  
kmeans()