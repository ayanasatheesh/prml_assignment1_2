# -*- coding: utf-8 -*-
"""kmeans_spectral_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZD6TGudHwrYpYTC9txQmRl-Szj_YwCu5
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import pprint
import matplotlib.pyplot as plt

# %matplotlib inline
#%precision 4
#np.set_printoptions(precision=4)
import pylab as pl

from google.colab import drive
drive.mount("/content/gdrive")

from google.colab import files
uploaded = files.upload()
for func in uploaded.keys():
       print('User uploaded file "{name}"'.format(name=func))
       
#on running this it will ask permission to mount with google drive. please click ok and allow. this program does not access any of the
# google drive documents except dataset which is uploaded
#a choose file button is displayed and on clicking that it will ask to choose the file. select the dataset in the question 
#and on running this, the dataset gets uploaded to google drive



from numpy import genfromtxt
mylist=genfromtxt("/content/gdrive/My Drive/Colab Notebooks/Dataset.csv", delimiter=',')
print(mylist)

K=np.zeros((mylist.shape[0],mylist.shape[0]))
#K2=np.zeros((mylist.shape[0],mylist.shape[0]))
#K=[[0]*mylist.shape[0] for i in range(mylist.shape[0])]
for i in range(mylist.shape[0]):
  for j in range(mylist.shape[0]):
    K[i][j]=(mylist[i].dot(mylist[j].transpose())+1)**2
    #K2[i][j]=(mylist[i].dot(mylist[j].transpose())+1)**3

#from numpy.core.numeric import identity
n=len(K)
one=np.zeros((n,n))

for i in range(n):
  for j in range(n):
    one[i][j]=1/n

identity_matrix=np.identity(n)
identity_matrix

K_centered=np.zeros((n,n))
#K_centered2=np.zeros((n,n))

K_centered=(identity_matrix-one).dot(K).dot(identity_matrix-one)
#K_centered2=(identity_matrix-one).dot(K2).dot(identity_matrix-one)
K_centered.shape
#K_centered2.shape

eigen_values , eigen_vectors = np.linalg.eig(K_centered)
#eigen_values2 , eigen_vectors2 = np.linalg.eig(K_centered2)

sorted_index = np.argsort(eigen_values)
sorted_index=sorted_index[::-1]
 
sorted_eigenvalue = eigen_values[sorted_index]
sorted_eigenvectors = eigen_vectors[:,sorted_index]
sorted_eigenvectors

captured_var=[]
j=0

tot = sum(eigen_values)
var=0
for i in sorted_eigenvalue:
  var+=(i/tot)*100
  captured_var.append(var)
  j=j+1

print("Variance captured by each component:\n")
for i in range(j):
  print(captured_var[i])

cum_var=0
k=0
threshold=95
for i in range(j):
  cum_var=cum_var+captured_var[i]
  k=k+1
  if(cum_var>=threshold):
    break
print("\nThe number of principal components:", k)

H=np.zeros((eigen_vectors.shape[0],k))
for i in range(eigen_vectors.shape[0]):
  for j in range(k):
   H[i][j] = sorted_eigenvectors[i][j]/sorted_eigenvalue[j]

H.shape

import random
def kmeans():
  x=[1,2,3,4]
  
  initialpartition=[random.choice(x) for _ in range(H.shape[0])]
  type(initialpartition)
  #for i in range(H.shape[0]):
  #  n = random.randint(1,4)
  #  initialpartition.append(n)
  #print(initialpartition)

  sum=np.zeros((4,H.shape[1]))
  count=np.zeros((4,H.shape[1]))
  for i in range(len(initialpartition)):
    sum[initialpartition[i]-1][0]=H[i][0]
    sum[initialpartition[i]-1][0]=H[i][1]
    count[initialpartition[i]-1][0]+=1
    count[initialpartition[i]-1][1]+=1

  mean=np.zeros((4,H.shape[1]))
  for i in range(4):
    for j in range(H.shape[1]):
      if(count[i][j]==0):
        mean[i][j]=0
      else:
        mean[i][j]=sum[i][j]/count[i][j]
  #mean
  dist=np.zeros(4)
  newpartition=[]
  errorfunction=[]
  c=0
  prevpartition=initialpartition
  while prevpartition!=newpartition:
    prevpartition=newpartition
    newpartition=[]
    s=0
    for i in range(H.shape[0]):
      for j in range(4):
        dist[j]=np.linalg.norm(H[i]-mean[j])
      mink=np.argmin(dist)
      newpartition.append(mink+1)
      s+=dist[mink]
    errorfunction.append(s)

    sum=np.zeros((4,H.shape[1]))
    count=np.zeros((4,H.shape[1]))
    for i in range(len(newpartition)):
      sum[newpartition[i]-1][0]+=H[i][0]
      sum[newpartition[i]-1][1]+=H[i][1]

      count[newpartition[i]-1][0]+=1
      count[newpartition[i]-1][1]+=1


    mean=np.zeros((4,H.shape[1]))
    for i in range(4):
      for j in range(H.shape[1]):
        if(count[i][j]==0):
          mean[i][j]=0
        else:
          mean[i][j]=sum[i][j]/count[i][j]
    c=c+1;

  iterations=[i for i in range(1,c+1)]   
  #newpartition

  plt.scatter(mylist[:, 0], mylist[:, 1], c=newpartition)
  plt.xlabel('Xvalues')
  plt.ylabel('Yvalues')
  plt.show()
  #plt.plot(iterations,errorfunction)
  #plt.show()
  #colors = ['b', 'g', 'r','y']
 # for i in range(len(newpartition)):
  #  plt.plot(mylist[i][0], mylist[i][1], color=colors[newpartition[i]-1])

#for i in range(5):
kmeans()