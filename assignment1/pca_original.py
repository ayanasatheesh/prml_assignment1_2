# -*- coding: utf-8 -*-
"""pca_original.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10FJ-7vigEy2X-kFLtWPKxrs-nEpsmICp
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import pprint
import matplotlib.pyplot as plt

# %matplotlib inline
#%precision 4
#np.set_printoptions(precision=4)
import pylab as pl

from google.colab import drive
drive.mount("/content/gdrive")
#on running this it will ask permission to mount with google drive. please click ok and allow. this program does not access any of the
# google drive documents except dataset which is uploaded

from google.colab import files
uploaded = files.upload()
for func in uploaded.keys():
       print('User uploaded file "{name}"'.format(name=func))
#a choose file button is displayed and on clicking that it will ask to choose the file. select the dataset in the question 
#and on running this, the dataset gets uploaded to google drive

from numpy import genfromtxt
mylist=genfromtxt("/content/gdrive/My Drive/Colab Notebooks/Dataset.csv", delimiter=',')
print(mylist)

list_mean=np.mean(mylist, axis = 0)
list_centered = mylist


for i in range(mylist.shape[0]):
  for j in range(mylist.shape[1]):
    list_centered[i][j]=mylist[i][j]-list_mean[j]

#print(list_mean)
print(list_centered)

covmat=np.dot(list_centered.T, list_centered)/(list_centered.shape[0])
covmat

eigen_values , eigen_vectors = np.linalg.eig(covmat)

print('Eigenvectors \n%s' %eigen_vectors)
print('\nEigenvalues \n%s' %eigen_values)

sorted_i = np.argsort(eigen_values)
sorted_i=sorted_i[::-1]
 
sorted_eigenvalue = eigen_values[sorted_i]
sorted_eigenvectors = eigen_vectors[:,sorted_i]
sorted_eigenvectors

captured_var=[]
j=0

tot = sum(eigen_values)
var=0
for i in sorted_eigenvalue:
  var+=(i/tot)*100
  captured_var.append(var)
  j=j+1

print("Variance captured by each component:\n")
for i in range(j):
   print("Component ",i+1,":", captured_var[i])

cum_var=0
k=0
threshold=95
for i in range(j):
  cum_var=cum_var+captured_var[i]
  k=k+1
  if(cum_var>=threshold):
    break
print("\nThe number of principal components:", k)

w=np.zeros((k,k))
for i in range(k):
  for j in range(k):
   w[j][i] = sorted_eigenvectors[j][i]
  
w

Y=np.zeros((1000,2))

Y= np.dot(w.transpose(),list_centered.transpose()).transpose()
#Y=Y.dot(w)
Y.shape
Y

x=np.zeros(mylist.shape[0])
y=np.zeros(mylist.shape[0])
for i in range(mylist.shape[0]):
  x[i]=mylist[i][0]
  y[i]=mylist[i][1]


# Plot the points using matplotlib
#plt.plot(x,y,'o')
#plt.xlim(0, 8), plt.ylim(-2, 8)
plt.plot(w[1],label="W1")
plt.xlabel("X values")
plt.ylabel("Y values")

#plt.plot(w[0],label="W2")

plt.legend(loc='best')
plt.show()

plt.plot(w[0],label="W2")
plt.legend(loc='best')
plt.xlabel("X values")
plt.ylabel("Y values")
plt.show()

#plt.plot(w[0])
#plt.plot(w[1])
newx=np.zeros(Y.shape[0])
newy=np.zeros(Y.shape[0])
for i in range(Y.shape[0]):
  newx[i]=Y[i][0]
  newy[i]=Y[i][1]

#newy=[]*Y.shape[0]
#for i in range(Y.shape[0]):
#  newy=Y[i][1]
#for i in range(1000):
#  plt.plot(Y[0],Y[1])
plt.plot(newx,newy,'o')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title("Dataset after PCA")

plt.show()