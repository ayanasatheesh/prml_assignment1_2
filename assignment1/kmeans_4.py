# -*- coding: utf-8 -*-
"""kmeans_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VmUER9KxPMp3Q6V_AVPNih_71QHiQZfO
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import pprint
import matplotlib.pyplot as plt

# %matplotlib inline
#%precision 4
#np.set_printoptions(precision=4)
import pylab as pl

from google.colab import drive
drive.mount("/content/gdrive")

from google.colab import files
uploaded = files.upload()
for func in uploaded.keys():
       print('User uploaded file "{name}"'.format(name=func))
       
#on running this it will ask permission to mount with google drive. please click ok and allow. this program does not access any of the
# google drive documents except dataset which is uploaded
#a choose file button is displayed and on clicking that it will ask to choose the file. select the dataset in the question 
#and on running this, the dataset gets uploaded to google drive



from numpy import genfromtxt
mylist=genfromtxt("/content/gdrive/My Drive/Colab Notebooks/Dataset.csv", delimiter=',')
print(mylist)

K=np.zeros((mylist.shape[0],mylist.shape[0]))
#K2=np.zeros((mylist.shape[0],mylist.shape[0]))
#K=[[0]*mylist.shape[0] for i in range(mylist.shape[0])]
for i in range(mylist.shape[0]):
  for j in range(mylist.shape[0]):
    K[i][j]=(mylist[i].dot(mylist[j].transpose())+1)**2
    #K2[i][j]=(mylist[i].dot(mylist[j].transpose())+1)**3

#from numpy.core.numeric import identity
n=len(K)
one=np.zeros((n,n))

for i in range(n):
  for j in range(n):
    one[i][j]=1/n

identity_matrix=np.identity(n)
identity_matrix

K_centered=np.zeros((n,n))
#K_centered2=np.zeros((n,n))

K_centered=(identity_matrix-one).dot(K).dot(identity_matrix-one)
#K_centered2=(identity_matrix-one).dot(K2).dot(identity_matrix-one)
K_centered.shape
#K_centered2.shape

eigen_values , eigen_vectors = np.linalg.eig(K_centered)
#eigen_values2 , eigen_vectors2 = np.linalg.eig(K_centered2)

sorted_index = np.argsort(eigen_values)
sorted_index=sorted_index[::-1]
 
sorted_eigenvalue = eigen_values[sorted_index]
sorted_eigenvectors = eigen_vectors[:,sorted_index]
sorted_eigenvectors

k=4

H=np.zeros((eigen_vectors.shape[0],k))
for i in range(eigen_vectors.shape[0]):
  for j in range(k):
   H[i][j] = sorted_eigenvectors[i][j]/sorted_eigenvalue[j]

H.shape

initialpartition=[] 
for i in range(H.shape[0]):  
  initialpartition.append((np.argmax(H[i])+1))
plt.scatter(mylist[:, 0], mylist[:, 1], c=initialpartition)
plt.xlabel('Xvalues')
plt.ylabel('Yvalues')
plt.show()